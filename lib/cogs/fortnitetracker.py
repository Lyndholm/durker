from asyncio.exceptions import TimeoutError
from os import getenv

import requests
from aiohttp import ClientSession
from discord import Color, Embed, File
from discord.ext.commands import Cog, command
from loguru import logger

from ..utils.utils import load_commands_from_json

cmd = load_commands_from_json("fortnitetracker")


class FortniteTracker(Cog, name='Fortnite Stats'):
    def __init__(self, bot):
        self.bot = bot
        self.headers = {"TRN-Api-Key": getenv("TRN_API_KEY")}

    @Cog.listener()
    async def on_ready(self):
        if not self.bot.ready:
           self.bot.cogs_ready.ready_up("fortnitetracker")

    @command(name=cmd["fnstats"]["name"], aliases=cmd["fnstats"]["aliases"],
            brief=cmd["fnstats"]["brief"],
            description=cmd["fnstats"]["description"],
            usage=cmd["fnstats"]["usage"],
            help=cmd["fnstats"]["help"],
            hidden=cmd["fnstats"]["hidden"], enabled=True)
    @logger.catch
    async def fortnite_stats_command(self, ctx, *, profile:str=None):
        if profile is None:
            embed = Embed(title='‚ùó –í–Ω–∏–º–∞–Ω–∏–µ!', description =f"{ctx.author.mention}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.", color= Color.red())
            await ctx.send(embed=embed)
            return

        plarform_reactions = ['üí°', '‚å®Ô∏è', 'üéÆ', 'üì±']
        prefered_api = None
        mode = 'all'

        embed = Embed(
            title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Fortnite",
            color=Color.gold(),
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n\n"
                        "1Ô∏è‚É£ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n"
                        "2Ô∏è‚É£ ‚Äî –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Embed.\n"
                        "\n‚ùå ‚Äî –≤—ã—Ö–æ–¥."
                        "\n\n**P.S.** –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –ø–æ—ç—Ç–æ–º—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –º–µ—Ç–æ–¥–∞."
                        " –ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Embed —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—á–Ω–µ–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ.\n\n"
        )
        main_message = await ctx.send(embed=embed)

        for reaction in ['1Ô∏è‚É£', '2Ô∏è‚É£', '‚ùå']:
            await main_message.add_reaction(reaction)

        try:
            api_react, user = await self.bot.wait_for(
                'reaction_add', timeout=120.0, check=lambda api_react,
                user: user == ctx.author and api_react.message.channel == ctx.channel and api_react.emoji in ['1Ô∏è‚É£', '2Ô∏è‚É£', '‚ùå']
            )
        except TimeoutError:
            await main_message.clear_reactions()
            return

        if str(api_react.emoji) == '1Ô∏è‚É£':
            prefered_api = "fnapi"

        elif str(api_react.emoji) == '2Ô∏è‚É£':
            prefered_api = "fortnitetracker"

        elif str(api_react.emoji) == '‚ùå':
            await main_message.clear_reactions()
            await main_message.edit(embed=Embed(title="–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–º"))
            return

        await main_message.clear_reactions()

        select_platform_embed = Embed(
                title="–í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
                color=Color.dark_teal(),
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –∏–≥—Ä–∞–µ—Ç–µ.\n\n"
                            f"{plarform_reactions[0]} ‚Äî –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º.\n"
                            f"{plarform_reactions[1]} ‚Äî –ü–ö\n{plarform_reactions[2]} ‚Äî –ö–æ–Ω—Å–æ–ª—å\n{plarform_reactions[3]} ‚Äî –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"
            )

        await main_message.edit(embed=select_platform_embed)

        for reaction in plarform_reactions:
            await main_message.add_reaction(reaction)

        try:
            platform_react, user = await self.bot.wait_for(
                'reaction_add', timeout=120.0, check=lambda platform_react,
                user: user == ctx.author and platform_react.message.channel == ctx.channel and platform_react.emoji in plarform_reactions
            )

        except TimeoutError:
            await main_message.clear_reactions()
            return

        await main_message.clear_reactions()

        if prefered_api == "fnapi":
            if str(platform_react.emoji) == '‚å®Ô∏è':
                mode = "keyboardMouse"
            elif str(platform_react.emoji) == 'üéÆ':
                mode = 'gamepad'
            elif str(platform_react.emoji) == 'üì±':
                mode = 'touch'
            elif str(platform_react.emoji) == 'üí°':
                mode = 'all'

            params = {"name": profile, "image": mode}
            async with ClientSession() as session:
                async with session.get('https://fortnite-api.com/v1/stats/br/v2', params=params) as r:
                    if r.status != 200:
                        await main_message.delete()
                        await ctx.message.reply(f"""```json\n{await r.text()}```""")
                        return

                    data = await r.json()

                    stats_embed= Embed(
                        title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è Fortnite",
                        color=Color.blurple(),
                        description="**–í–Ω–∏–º–∞–Ω–∏–µ!**\n–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω. –û–Ω –º–æ–∂–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å."
                        )
                    stats_embed.set_image(url=data["data"]["image"])
                    await main_message.edit(embed=stats_embed)


        elif prefered_api == "fortnitetracker":
            if str(platform_react.emoji) == '‚å®Ô∏è':
                mode = "kbm"
            elif str(platform_react.emoji) == 'üéÆ':
                mode = 'gamepad'
            elif str(platform_react.emoji) == 'üì±':
                mode = 'touch'
            elif str(platform_react.emoji) == 'üí°':
                mode = 'all'

            r = requests.get(
                f"https://api.fortnitetracker.com/v1/profile/{mode}/{profile}",
                headers=self.headers,
            )

            if r.status_code != 200:
                await main_message.delete()
                await ctx.message.reply(f"""```json\n{await r.text()}```""")
                return

            data = r.json()
            embed = Embed(
                title=f"{data.get('epicUserHandle', profile)} ({data.get('platformNameLong', mode)})",
                color=Color.random()
            )
            stats = data.get("lifeTimeStats", {})
            for s in stats:
                embed.add_field(
                    name=s.get("key", "Unknown"), value=s.get("value", "Unknown")
                )
            await main_message.edit(embed=embed)


def setup(bot):
    bot.add_cog(FortniteTracker(bot))
