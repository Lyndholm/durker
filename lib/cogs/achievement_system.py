import ast
import asyncio
import json
from datetime import datetime
from operator import itemgetter
from random import choice
from typing import Optional

from discord import Color, Embed, Forbidden, Member
from discord.ext.commands import (Cog, check_any, command, dm_only, guild_only,
                                  has_permissions, is_owner)
from discord.ext.menus import ListPageSource, MenuPages
from loguru import logger

from ..utils.checks import is_channel, required_level
from ..utils.constants import STATS_CHANNEL
from ..utils.lazy_paginator import paginate
from ..utils.utils import edit_user_reputation, load_commands_from_json

cmd = load_commands_from_json('achievement_system')


class AchievementMenu(ListPageSource):
    def __init__(self, ctx, data, overview_type):
        self.ctx = ctx
        self.overview_type = overview_type
        self.thumbnails = (
            'https://school25.edu.yar.ru/dlya_stranits/trophy_icon_by_papillonstudio_d9dtwte_w394_h394.png',
            'https://icon-library.com/images/achievements-icon/achievements-icon-8.jpg',
            'https://cdn.iconscout.com/icon/free/png-512/achievement-1589036-1347675.png',
            'https://cdn4.iconfinder.com/data/icons/gamification-1/256/--02-512.png',
            'https://img.icons8.com/cotton/2x/sport-badge.png'
            )

        super().__init__(data, per_page=5)

    async def write_page(self, menu, offset, fields=[]):
        len_data = len(self.entries)

        embed = Embed(color=self.ctx.author.color).set_thumbnail(url=choice(self.thumbnails))
        embed.set_footer(text=f'{offset} ‚Äî {min(len_data, offset+self.per_page-1)} –∏–∑ {len_data} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'
                              f' | {self.ctx.prefix}getinfo <achievement> –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏')
        if self.overview_type == 'global':
            embed.title = 'üéñÔ∏è –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'
        elif self.overview_type == 'user':
            embed.title = f'üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {self.ctx.author.display_name}'

        for name, value, in fields:
            embed.add_field(name=name, value=value, inline=False)

        return embed

    async def format_page(self, menu, entries):
        offset = (menu.current_page*self.per_page) + 1
        fields = []

        if self.overview_type == 'global':
            table = ('\n'.join(f'\n> **{entry[2]}**\n> {entry[3]}'
                    for idx, entry in enumerate(entries)))
            fields.append(('–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:', table))
        elif self.overview_type == 'user':
            table = ('\n'.join(f'\n> **{entry[2]}**\n> **–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:** {entry[-1][:-3]} –ú–°–ö'
                    for idx, entry in enumerate(entries)))
            fields.append(('–û—Ç–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:', table))

        return await self.write_page(menu, offset, fields)


class AchievementSystem(Cog, name='–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π'):
    def __init__(self, bot):
        self.bot = bot
        self.achievements_banlist = []

    def chuncks(self, l, n):
        """Yield successive n-sized chunks from l."""
        for i in range(0, len(l), n):
            yield l[i:i + n]

    async def can_view_hidden_achievement(self, user_id: int, achievement: str) -> bool:
        if user_id == self.bot.owner.id:
            return True
        return (await self.user_have_achievement(user_id, achievement))

    async def user_have_achievement(self, user_id: int, achievement: str) -> bool:
        data = await self.bot.pg_pool.fetchval(
            'SELECT achievements_list FROM users_stats WHERE user_id = $1',
            user_id)
        data = ast.literal_eval(data)
        data = data['user_achievements_list']
        user_achievements = [key for dic in data for key in dic.keys()]
        return achievement in user_achievements

    async def edit_rep_for_achievement(self, target_id: int, achievement: str, action: str):
        rep_boost = await self.bot.pg_pool.fetchval(
                   'SELECT rep_boost FROM achievements WHERE internal_id '
                   'LIKE $1', achievement)
        await edit_user_reputation(self.bot.pg_pool, target_id, action, rep_boost)

    @logger.catch
    async def give_achievement(self, admin_id: int, target_id: int, achievement: str):
        if not (await self.user_have_achievement(target_id, achievement)):
            rec = await self.bot.pg_pool.fetchval(
                "SELECT id FROM achievements WHERE "
                "to_tsvector(internal_id) @@ to_tsquery($1)",
                achievement)
            if rec is None:
                return
            data = await self.bot.pg_pool.fetchval(
                'SELECT achievements_list FROM users_stats WHERE user_id = $1',
                target_id)
            data = ast.literal_eval(data)
            transaction = {
                achievement: {
                    'id': len(data['user_achievements_list'])+1,
                    'achieved_at': datetime.now().strftime('%d.%m.%Y %H:%M:%S'),
                    'given_by': admin_id
                    }
                }
            data['user_achievements_list'].append(transaction)
            await self.bot.pg_pool.execute(
                'UPDATE users_stats SET achievements_list = $1 WHERE user_id = $2',
                json.dumps(data, ensure_ascii=False), target_id)
            await self.edit_rep_for_achievement(target_id, achievement, '+')

    @logger.catch
    async def take_achievement_away(self, target_id: int, achievement: str):
        if (await self.user_have_achievement(target_id, achievement)):
            data = await self.bot.pg_pool.fetchval(
                'SELECT achievements_list FROM users_stats WHERE user_id = $1',
                target_id)
            data = ast.literal_eval(data)
            temp = data['user_achievements_list']
            new_list = [a for a in temp if achievement not in list(a.keys())]
            data['user_achievements_list'] = new_list
            await self.bot.pg_pool.execute(
                'UPDATE users_stats SET achievements_list = $1 WHERE user_id = $2',
                json.dumps(data, ensure_ascii=False), target_id)
            await self.edit_rep_for_achievement(target_id, achievement, '-')

    @logger.catch
    def advanced_achievements_memu(self, ctx, data):
        achievements = []

        for ach_chunks in list(self.chuncks(data, 1)):
            ach_chunks = ach_chunks[0]
            embed = Embed(
                title=f'üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ach_chunks[2]}',
                color=ctx.author.color,
                description=ach_chunks[3]
            ).set_thumbnail(url=ach_chunks[4])
            fields = [
                ('–ë—É—Å—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', ach_chunks[6], True),
                ('–í—ã–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', '–î–∞' if ach_chunks[7] else '–ù–µ—Ç', True),
                ('–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ', ach_chunks[5], True)
            ]

            for name, value, inline in fields:
                embed.add_field(name=name, value=value, inline=inline)
            achievements.append(embed)

        for idx, embed in enumerate(achievements, 1):
            embed.set_footer(text=f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {idx} –∏–∑ {len(achievements)}')

        return achievements

    @logger.catch
    def advanced_user_achievements_memu(self, ctx, data):
        achievements = []

        for ach_chunks in list(self.chuncks(data, 1)):
            ach_chunks = ach_chunks[0]
            embed = Embed(
                title=f'üèÖ {ach_chunks[2]}',
                color=ctx.author.color,
                description=ach_chunks[3]
            ).set_thumbnail(url=ach_chunks[4]
            ).set_author(name=f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è {ctx.author.display_name}', icon_url=ctx.author.avatar_url)
            fields = [
                ('–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:', ach_chunks[-1][:-3] + ' –ú–°–ö', True)
            ]

            for name, value, inline in fields:
                embed.add_field(name=name, value=value, inline=inline)
            achievements.append(embed)

        for idx, embed in enumerate(achievements, 1):
            embed.set_footer(text=f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {idx} –∏–∑ {len(achievements)}')

        return achievements

    @logger.catch
    def achievement_helper(self, ctx, data):
        embed = Embed(
           title=f'üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {data[2]}',
           color=ctx.author.color,
           description=data[3]
        ).set_thumbnail(url=data[4])
        fields = [
                ('–ë—É—Å—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏', data[6], True),
                ('–í—ã–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', "–î–∞" if data[7] else "–ù–µ—Ç", True),
                ('–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ', data[5], True)
            ]
        if ctx.author.id == self.bot.owner.id:
            fields.extend([
                ('id', data[0], True),
                ('internal_id', data[1], True),
                ('hidden', data[8], True),
            ])
        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)

        return [embed]

    @logger.catch
    async def display_method(self, ctx) -> str:
        reactions = ['1Ô∏è‚É£', '2Ô∏è‚É£']
        embed = Embed(
            title='üí† –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            color=ctx.author.color,
            timestamp=datetime.utcnow(),
            description='**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n\n'
                        '1Ô∏è‚É£ ‚Äî –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = 1 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.\n'
                        '2Ô∏è‚É£ ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é. 1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ = 5 –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.**'
        )
        message = await ctx.reply(embed=embed, mention_author=False)
        for r in reactions:
            await message.add_reaction(r)
        try:
            method, user = await self.bot.wait_for(
                'reaction_add', timeout=120.0,
                check=lambda method, user: user == ctx.author
                and method.message.channel == ctx.channel
                and method.emoji in reactions)
        except asyncio.TimeoutError:
            await message.clear_reactions()
            return
        await message.delete()

        if str(method.emoji) == '1Ô∏è‚É£':
            method = 'detailed'
        elif str(method.emoji) == '2Ô∏è‚É£':
            method = 'briefly'
        else:
            method = None
        return method

    @logger.catch
    async def achievement_award_notification(self, achievement: str, target: Member):
        data = await self.bot.pg_pool.fetchrow(
            'SELECT * FROM achievements WHERE '
            'to_tsvector(internal_id) @@ to_tsquery($1)',
            achievement)
        embed = Embed(
            title='–û—Ç–∫—Ä—ã—Ç–æ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!',
            color=Color.random(),
            timestamp=datetime.utcnow(),
            description=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{data[2]}** '
                        f'–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ **{target.guild}**\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ '
                        f'—Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ `{self.bot.PREFIX[0]}inventory`.'
        ).set_thumbnail(url=data[4])
        try:
            await target.send(embed=embed)
        except Forbidden:
            pass

    @command(name=cmd["achieve"]["name"], aliases=cmd["achieve"]["aliases"],
            brief=cmd["achieve"]["brief"],
            description=cmd["achieve"]["description"],
            usage=cmd["achieve"]["usage"],
            help=cmd["achieve"]["help"],
            hidden=cmd["achieve"]["hidden"], enabled=True)
    @check_any(dm_only(), is_channel(STATS_CHANNEL))
    @required_level(cmd["achieve"]["required_level"])
    @logger.catch
    async def how_achievement_sys_works_command(self, ctx):
        embed = Embed(
            title='üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: —á—Ç–æ —ç—Ç–æ, –¥–ª—è —á–µ–≥–æ –Ω—É–∂–Ω—ã, –∫–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.',
            color=ctx.author.color,
            timestamp=datetime.utcnow()
        ).set_thumbnail(url='https://i.pinimg.com/originals/88/40/b8/8840b8d2c07bf805cdab22c0e4b54f59.gif')
        embed.set_footer(text=ctx.author, icon_url=ctx.author.avatar_url)
        embed.description = \
        '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.\n–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è ' \
        '‚Äî –æ–¥–∏–Ω –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏. –£ –∫–∞–∂–¥–æ–π –∞—á–∏–≤–∫–∏ ' \
        '–µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏, ' \
        '–∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç—Å—è –∑–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —ç—Ç–æ–π —Å–∞–º–æ–π –∞—á–∏–≤–∫–∏. –ë**–æ**–ª—å—à–∞—è —á–∞—Å—Ç—å ' \
        '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤—ã–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—á–∏–≤–∫–∏ –º–æ–≥—É—Ç –≤—ã–¥–∞—Ç—å ' \
        '—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ–≤—Ä–µ—Ä–∞. –°–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ ' \
        '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ <#604621910386671616> –ø–æ –∫–æ–º–∞–Ω–¥–µ ' \
        f'`{ctx.prefix or self.bot.PREFIX[0]}achievements`\n–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è. ' \
        '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –Ω–æ–≤–æ–π –∞—á–∏–≤–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± ' \
        '—ç—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ <#639925210849476608>\n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è ' \
        '–∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ <@375722626636578816>'
        await ctx.reply(embed=embed, mention_author=False)


    @command(name=cmd["achievements"]["name"], aliases=cmd["achievements"]["aliases"],
            brief=cmd["achievements"]["brief"],
            description=cmd["achievements"]["description"],
            usage=cmd["achievements"]["usage"],
            help=cmd["achievements"]["help"],
            hidden=cmd["achievements"]["hidden"], enabled=True)
    @check_any(dm_only(), is_channel(STATS_CHANNEL))
    @required_level(cmd["achievements"]["required_level"])
    @logger.catch
    async def achievements_list_command(self, ctx):
        data = await self.bot.pg_pool.fetch(
            'SELECT * FROM achievements ORDER BY id')
        if ctx.author.id != self.bot.owner.id:
            data = [i for i in data if i[8] is False]
        if not data:
            await ctx.reply(
                'üò≥ –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –Ω–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—É—Å—Ç–∞.'
                f'\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º **{self.bot.owner}**',
                mention_author=False
            )
            return

        method = await self.display_method(ctx)
        if method == 'detailed':
            embed = self.advanced_achievements_memu(ctx, data)
            await paginate(ctx, embed)
        elif method == 'briefly':
            menu = MenuPages(
                source=AchievementMenu(ctx, data, 'global'),
                clear_reactions_after=True,
                timeout=120.0)
            await menu.start(ctx)
        else:
            return


    @command(name=cmd["getinfo"]["name"], aliases=cmd["getinfo"]["aliases"],
            brief=cmd["getinfo"]["brief"],
            description=cmd["getinfo"]["description"],
            usage=cmd["getinfo"]["usage"],
            help=cmd["getinfo"]["help"],
            hidden=cmd["getinfo"]["hidden"], enabled=True)
    @check_any(dm_only(), is_channel(STATS_CHANNEL))
    @required_level(cmd["getinfo"]["required_level"])
    @logger.catch
    async def get_achievement_command(self, ctx, *, achievement: Optional[str]):
        if achievement:
            internal_id = await self.bot.pg_pool.fetchval(
                'SELECT internal_id FROM achievements WHERE '
                'to_tsvector(name) @@ plainto_tsquery($1)',
                achievement)

            if internal_id is not None:
                data = await self.bot.pg_pool.fetchrow(
                   'SELECT * FROM achievements WHERE internal_id '
                   'LIKE $1', internal_id)
                if data[8] is False:
                    await paginate(ctx, self.achievement_helper(ctx, data))
                else:
                    if (await self.can_view_hidden_achievement(ctx.author.id, internal_id)):
                        await paginate(ctx, self.achievement_helper(ctx, data))
                    else:
                        await ctx.reply('üïµÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Å–∫—Ä—ã—Ç–æ.', mention_author=False)
            else:
                await ctx.reply('4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', mention_author=False)
        else:
            await ctx.reply('üìí –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.', mention_author=False)


    @command(name=cmd["inventory"]["name"], aliases=cmd["inventory"]["aliases"],
            brief=cmd["inventory"]["brief"],
            description=cmd["inventory"]["description"],
            usage=cmd["inventory"]["usage"],
            help=cmd["inventory"]["help"],
            hidden=cmd["inventory"]["hidden"], enabled=True)
    @check_any(dm_only(), is_channel(STATS_CHANNEL))
    @required_level(cmd["inventory"]["required_level"])
    @logger.catch
    async def inventory_command(self, ctx):
        rec = await self.bot.pg_pool.fetchval(
            'SELECT achievements_list FROM users_stats WHERE user_id = $1',
            ctx.author.id)
        rec = ast.literal_eval(rec)
        user_data = rec['user_achievements_list']
        if user_data:
            user_achievements = tuple(
                [key for dic in user_data for key in dic.keys()]
            )
            achievements_data = await self.bot.pg_pool.fetch(
                'SELECT * FROM achievements WHERE internal_id = any($1::text[]) ORDER BY id',
                user_achievements)
            achievements_data = [list(l) for l in achievements_data]

            for dic in user_data:
                achievement_id = list(dic.keys())[0]
                for entry in achievements_data:
                    if achievement_id in entry:
                        entry.append(dic[achievement_id]['achieved_at'])
            data = sorted(achievements_data, key=itemgetter(-1), reverse=True)

            method = await self.display_method(ctx)
            if method == 'detailed':
                embed = self.advanced_user_achievements_memu(ctx, data)
                await paginate(ctx, embed)
            elif method == 'briefly':
                menu = MenuPages(
                    source=AchievementMenu(ctx, data, 'user'),
                    clear_reactions_after=True,
                    timeout=120.0)
                await menu.start(ctx)
            else:
                return
        else:
            await ctx.reply(
                '–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –°–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –º–æ–∂–Ω–æ '
                '–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ <#604621910386671616> –ø–æ –∫–æ–º–∞–Ω–¥–µ '
                f'`{ctx.prefix or self.bot.PREFIX[0]}achievements`',
                mention_author=False
            )


    @command(name=cmd["addachievement"]["name"], aliases=cmd["addachievement"]["aliases"],
            brief=cmd["addachievement"]["brief"],
            description=cmd["addachievement"]["description"],
            usage=cmd["addachievement"]["usage"],
            help=cmd["addachievement"]["help"],
            hidden=cmd["addachievement"]["hidden"], enabled=True)
    @has_permissions(administrator=True)
    @guild_only()
    @logger.catch
    async def add_achievement_to_user_command(self, ctx, member: Optional[Member], *, achievement: Optional[str]):
        if member is None:
            await ctx.reply(
                'üìù –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.',
                mention_author=False
            )
            return
        if achievement:
            data = await self.bot.pg_pool.fetchrow(
                'SELECT name, internal_id FROM achievements WHERE '
                'to_tsvector(internal_id) @@ to_tsquery($1)',
                achievement)
            if data is not None:
                if not (await self.user_have_achievement(member.id, achievement)):
                    await self.give_achievement(ctx.author.id, member.id, achievement)
                    await self.achievement_award_notification(achievement, member)
                    await ctx.reply(
                        f'‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{data[0]}** —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **{member.display_name}**.',
                        mention_author=False
                    )
                else:
                    await ctx.reply(
                        '‚õî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.',
                        mention_author=False
                    )
            else:
                await ctx.reply(
                    '4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£ –£–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.',
                    mention_author=False
                )
        else:
            await ctx.reply(
                'üìí –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.', mention_author=False
            )


    @command(name=cmd["removeachievement"]["name"], aliases=cmd["removeachievement"]["aliases"],
            brief=cmd["removeachievement"]["brief"],
            description=cmd["removeachievement"]["description"],
            usage=cmd["removeachievement"]["usage"],
            help=cmd["removeachievement"]["help"],
            hidden=cmd["removeachievement"]["hidden"], enabled=True)
    @has_permissions(administrator=True)
    @guild_only()
    @logger.catch
    async def remove_achievement_from_user_command(self, ctx, member: Optional[Member], *, achievement: Optional[str]):
        if member is None:
            await ctx.reply(
                'üìù –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ.',
                mention_author=False
            )
            return
        if achievement:
            data = await self.bot.pg_pool.fetchrow(
                'SELECT name, internal_id FROM achievements WHERE '
                'to_tsvector(internal_id) @@ to_tsquery($1)',
                achievement
            )
            if data is not None:
                if (await self.user_have_achievement(member.id, achievement)):
                    await self.take_achievement_away(member.id, achievement)
                    await ctx.reply(
                        f'‚úÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ **{data[0]}** —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{member.display_name}**.',
                        mention_author=False
                    )
                else:
                    await ctx.reply(
                        '‚õî –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
                        mention_author=False
                    )
            else:
                await ctx.reply(
                    '4Ô∏è‚É£0Ô∏è‚É£4Ô∏è‚É£ –£–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–±—Ä–∞—Ç—å –µ–≥–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.',
                    mention_author=False
                )
        else:
            await ctx.reply(
                'üìí –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.', mention_author=False
            )


    @command(name=cmd["resetachievements"]["name"], aliases=cmd["resetachievements"]["aliases"],
            brief=cmd["resetachievements"]["brief"],
            description=cmd["resetachievements"]["description"],
            usage=cmd["resetachievements"]["usage"],
            help=cmd["resetachievements"]["help"],
            hidden=cmd["resetachievements"]["hidden"], enabled=True)
    @is_owner()
    @dm_only()
    @logger.catch
    async def reset_achievements_command(self, ctx, user_id: Optional[int]):
        if user_id is None:
            return await ctx.message.add_reaction('üü•')

        data = {'user_achievements_list': []}
        await self.bot.pg_pool.execute(
            'UPDATE users_stats SET achievements_list = $1 WHERE user_id = $2',
            json.dumps(data, ensure_ascii=False), user_id)
        self.achievements_banlist.append(user_id)
        embed = Embed(
                title='‚úÖ –£—Å–ø–µ—à–Ω–æ!',
                color=Color.green(),
                timestamp=datetime.utcnow(),
                description=f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <@{user_id}> —Å–±—Ä–æ—à–µ–Ω—ã.'
            )
        await ctx.reply(embed=embed, mention_author=False)


    @Cog.listener()
    async def on_ready(self):
        if not self.bot.ready:
           self.bot.cogs_ready.ready_up("achievement_system")


def setup(bot):
    bot.add_cog(AchievementSystem(bot))
